#include <iostream>
#include <vector>
#include <chrono>
#include <omp.h>
using namespace std;
using namespace std::chrono;
void merge(vector<int>& arr, int l, int m, int r) {
int n1 = m - l + 1;
int n2 = r - m;
// Create temporary arrays
vector<int> L(n1), R(n2);
// Copy data to temporary arrays L[] and R[]
for (int i = 0; i < n1; ++i)
L[i] = arr[l + i];
for (int j = 0; j < n2; ++j)
R[j] = arr[m + 1 + j];
// Merge the temporary arrays back into arr[l..r]
int i = 0, j = 0, k = l;
while (i < n1 && j < n2) {
if (L[i] <= R[j]) {
arr[k] = L[i];
++i;
} else {
arr[k] = R[j];
++j;
}
++k;
}
// Copy the remaining elements of L[], if any
while (i < n1) {
arr[k] = L[i];
++i;
++k;
}
// Copy the remaining elements of R[], if any
while (j < n2) {
arr[k] = R[j];
++j;
++k;
}
}
void mergeSort(vector<int>& arr, int l, int r) {
if (l >= r)
return;
int m = l + (r - l) / 2;
#pragma omp task
mergeSort(arr, l, m);
#pragma omp task
mergeSort(arr, m + 1, r);
#pragma omp taskwait
merge(arr, l, m, r);
}
int main() {
// Generate a random array
vector<int> arr = {12, 11, 13, 5, 6, 7};
// Sequential Merge Sort
auto start = high_resolution_clock::now();
mergeSort(arr, 0, arr.size() - 1);
auto stop = high_resolution_clock::now();
auto duration_merge_seq = duration_cast<microseconds>(stop - start);
cout << "Time taken for sequential merge sort: " << 
duration_merge_seq.count() << " microseconds" << endl;
// Parallel Merge Sort
arr = {12, 11, 13, 5, 6, 7}; // Reset array
start = high_resolution_clock::now();
#pragma omp parallel
{
#pragma omp single
mergeSort(arr, 0, arr.size() - 1);
}
stop = high_resolution_clock::now();
auto duration_merge_par = duration_cast<microseconds>(stop - start);
cout << "Time taken for parallel merge sort: " << 
duration_merge_par.count() << " microseconds" << endl;
return 0;
}
